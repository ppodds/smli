use crate::ast;
use std::str::FromStr;

grammar;

pub Program: Box<Vec<Box<ast::Statement>>> = Statement+ => Box::new(<>);

pub Statement: Box<ast::Statement> = {
    Expression => Box::new(ast::Statement::Expression(<>)),
    "(" "define" <id:ID> <e:Expression> ")" => Box::new(ast::Statement::DefineStatement(Box::new(ast::DefineStatement(id, e)))),
    PrintStatement => Box::new(ast::Statement::PrintStatement(<>)),
}

PrintStatement: Box<ast::PrintStatement> = {
    "(" "print-num" <e:Expression> ")" => Box::new(ast::PrintStatement::PrintNumber(e)),
    "(" "print-bool" <e:Expression> ")" => Box::new(ast::PrintStatement::PrintBoolean(e)),
}

pub Expression: Box<ast::Expression> = {
    Bool => Box::new(ast::Expression::Boolean(<>)),
    Num => Box::new(ast::Expression::Number(<>)),
    ID => Box::new(ast::Expression::Variable(<>)),
    NumOp => Box::new(ast::Expression::NumOperate(<>)),
    LogicalOp => Box::new(ast::Expression::LogicalOperate(<>)),
    FunctionExpression => Box::new(ast::Expression::FunctionExpression(<>)),
    FunctionCall => Box::new(ast::Expression::FunctionCall(<>)),
    IfExpression => Box::new(ast::Expression::IfExpression(<>)),
}

NumOp: Box<ast::NumOperator> = {
    "(" "+" <v1:Expression> <v2:Expression+> ")" => Box::new(ast::NumOperator::Plus(v1, v2)),
    "(" "-" <v1:Expression> <v2:Expression> ")" => Box::new(ast::NumOperator::Minus(v1, v2)),
    "(" "*" <v1:Expression> <v2:Expression+> ")" => Box::new(ast::NumOperator::Multiply(v1, v2)),
    "(" "/" <v1:Expression> <v2:Expression> ")" => Box::new(ast::NumOperator::Divide(v1, v2)),
    "(" "mod" <v1:Expression> <v2:Expression> ")" => Box::new(ast::NumOperator::Modulus(v1, v2)),
    "(" ">" <v1:Expression> <v2:Expression> ")" => Box::new(ast::NumOperator::Greater(v1, v2)),
    "(" "<" <v1:Expression> <v2:Expression> ")" => Box::new(ast::NumOperator::Smaller(v1, v2)),
    "(" "=" <v1:Expression> <v2:Expression+> ")" => Box::new(ast::NumOperator::Equal(v1, v2)),
}

LogicalOp: Box<ast::LogicalOperator> = {
    "(" "and" <v1:Expression> <v2:Expression+> ")" => Box::new(ast::LogicalOperator::And(v1, v2)),
    "(" "or" <v1:Expression> <v2:Expression+> ")" => Box::new(ast::LogicalOperator::Or(v1, v2)),
    "(" "not" <v:Expression> ")" => Box::new(ast::LogicalOperator::Not(v)),
}

FunctionExpression: Box<ast::FunctionExpression> = "(" "fun" "(" <ids:ID*> ")" <e:Expression> ")" => Box::new(ast::FunctionExpression(Box::new(ids), e));

FunctionCall: Box<ast::FunctionCall> = {
    "(" <fe:FunctionExpression> <e:Expression*> ")" => Box::new(ast::FunctionCall::ExpressionCall(fe, e)),
    "(" <id:ID> <e:Expression*> ")" => Box::new(ast::FunctionCall::NameCall(id, e)),
}

IfExpression: Box<ast::IfExpression> = "(" "if" <test_exp:Expression> <than_exp:Expression> <else_exp:Expression> ")" => Box::new(ast::IfExpression(test_exp, than_exp, else_exp));

Num: i32 = r"(0|[1-9]\d*|-[1-9]\d*)" => i32::from_str(<>).unwrap();

ID: String = r"[a-z]([a-z]|\d|-)*" => String::from(<>);

Bool: bool = {
    "#t" => true,
    "#f" => false,
}